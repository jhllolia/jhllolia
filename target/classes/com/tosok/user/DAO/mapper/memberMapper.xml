<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">

	<select id="selectReview" resultType="com.tosok.user.VO.ReviewVO" parameterType="java.util.HashMap">
		/* [memberMapper][selectReview][고객 상품평 출력] */
		<![CDATA[

			SELECT			*
			FROM			bbs_review_tb
			WHERE			VIEW_STATE		=	'Y'
			GROUP BY		VIEW_SEQ
			ORDER BY		VIEW_DATE

		]]>
	</select>

	<!--  -->
	<select id="getProductReviewData" resultType="com.tosok.user.VO.ReviewVO" parameterType="java.util.HashMap">
		/* [memberMapper][getProductReviewData][리뷰 데이터 출력] */
		<![CDATA[

			SELECT			A.*,
							(
								SELECT	MIN(PRODUCT_FILE_NAME) 
								FROM	bbs_product_file_tb
								WHERE	PRODUCT_FILE_STATE 	=	'Y' 
								AND		PRODUCT_SEQ 		=	A.PRODUCT_NUM
							) AS FILE_NAME

			FROM			bbs_review_tb		A
			WHERE			A.VIEW_STATE		=	'Y'
			AND				A.ORDER_NUM			=	#{ORDER_NUM}
			AND				A.REVIEW_ID			=	#{REVIEW_ID}
			AND				A.PRODUCT_NUM		=	#{PRODUCT_NUM}
			AND				A.PRODUCT_NAME		=	#{PRODUCT_NAME}
			AND				A.PRODUCT_OPTION	=	#{PRODUCT_OPTION}
			AND				A.PRODUCT_QTY		=	#{PRODUCT_QTY}
			GROUP BY		A.VIEW_SEQ

		]]>
	</select>

	<!--  -->
	<select id="selectMemberReviewList" resultType="com.tosok.user.VO.ReviewVO" parameterType="java.util.HashMap">
		<![CDATA[

			SELECT		*
			FROM		bbs_review_tb
			WHERE		VIEW_STATE		=	'Y'
			AND			REVIEW_ID		=	#{id}
			ORDER BY	VIEW_DATE DESC
			LIMIT		#{pageStart}, #{perPageNum}

		]]>
	</select>

	<!--  -->
   	<select id="selectMemberReviewCount" resultType="int" parameterType="java.util.HashMap">
		<![CDATA[

	    	SELECT	COUNT(*)
	    	FROM	bbs_review_tb
			WHERE	VIEW_STATE		=	'Y'
			AND		REVIEW_ID		=	#{REVIEW_ID}

		]]>
    </select>

	<!-- 메인 페이지 미팅 / 이벤트 / 인원 -->
	<select id="selectTotalCount" resultType="com.tosok.user.VO.MemberVO" parameterType="java.util.HashMap">
		<![CDATA[

			SELECT 		IFNULL(COUNT(A.SEAT_SEQ), 0)	AS 	MAIN_MEETING,
						IFNULL(COUNT(B.PAY_SEQ), 0)		AS	MAIN_EVENT,
						IFNULL(COUNT(C.member_Seq), 0)	AS	MAIN_MEMBER

			FROM		bbs_seat_tb 			A
			LEFT JOIN	bbs_payment_tb			B	
			ON			A.SEAT_SEQ		=		B.PAY_SEQ
			LEFT JOIN	member_tb				C
			ON			A.SEAT_SEQ		=		C.member_Seq

			WHERE		A.SEAT_STATE	=		'Y'

		]]>
	</select>

	<!-- ADMIN 회원정보 리스트 -->
	<select id="adminSelectPerson" resultType="com.tosok.user.VO.MemberVO" parameterType="java.util.HashMap">
		<![CDATA[

			SELECT 		member_Seq
						, member_Id
						, member_Name
						, member_Phone
						, member_Zip
						, member_Addr1
						, member_Addr2
						, member_state
						, (
							SELECT	IFNULL(COUNT(*), 0)
							FROM	bbs_payment_tb
							WHERE	BUYER_SEQ	=	A.member_Seq
						) AS member_Apply_Count
						, (
							SELECT	IFNULL(SUM(PRODUCT_PRICE * PRODUCT_QTY), 0)
							FROM	bbs_payment_tb
							WHERE	BUYER_PAID_STATUS	=	'paid'
							AND		BUYER_SEQ			=	A.member_Seq
						) AS member_Payment_Count
						, (
							SELECT	IFNULL(COUNT(*), 0)
							FROM	bbs_login_tb
							WHERE	LOGIN_ID	=	A.member_Id
						) AS memeber_login_Count
						, member_authkey
						, member_authstatus
						, register_Date
			FROM		member_tb A

		]]>
		<include refid="search" />
		<![CDATA[
			
			GROUP BY	member_Seq
			ORDER BY	member_Seq DESC

		]]>
	</select>

	<sql id="search">
		<choose>
			<when test="LIST_STATE == null"></when>
			<when test="LIST_STATE == 't'.toString()">
				WHERE	member_Id
				LIKE	CONCAT('%', #{LIST_KEYWORD}, '%')
			</when>
			<when test="LIST_STATE == 'c'.toString()">
				WHERE	member_Name
				LIKE	CONCAT('%', #{LIST_KEYWORD}, '%')
			</when>
			<when test="LIST_STATE == 'tc'.toString()">
				WHERE	member_Phone
				LIKE	CONCAT('%', #{LIST_KEYWORD}, '%')
			</when>
		</choose>
	</sql>

	<!--  -->
	<select id="selectProductReview" resultType="com.tosok.user.VO.ReviewVO" parameterType="java.util.HashMap">
		<![CDATA[

			SELECT		*
			FROM		bbs_review_tb
			WHERE		VIEW_STATE		=	'Y'
			AND			PRODUCT_NUM		=	#{PRODUCT_NUM}
			ORDER BY	VIEW_DATE DESC

		]]>
	</select>

	<!--  -->
	<select id="selectProductReturnSEQ" resultType="com.tosok.user.VO.PayVO">

		SELECT	PAY_SEQ
				, ORDER_NUM
				, IMP_UID
				, MERCHANT_UID				
				, PRODUCT_NUM
				, (
					SELECT	MIN(PRODUCT_FILE_NAME) 
					FROM		bbs_product_file_tb
					WHERE		PRODUCT_FILE_STATE 	=	'Y' 
					AND		PRODUCT_SEQ 			=	A.PRODUCT_NUM
				) AS PRODUCT_PROFILE
				, PRODUCT_NAME
				, PRODUCT_OPTION
				, PRODUCT_QTY
				, PAID_DATE
		FROM	bbs_payment_tb A
		WHERE 	EXISTS 	(
    						SELECT		*
							FROM		member_tb
							WHERE		A.BUYER_EMAIL	=	member_Id
							AND			member_Id		=	#{BUYER_EMAIL}
							AND			A.PAY_SEQ		IN	(${LIST_KEYWORD})
						)
	</select>

	<!-- 로그인 체크 -->
	<select id="otherSignupWay" resultType="com.tosok.user.VO.MemberVO">

		SELECT	member_Way 
		FROM 	member_tb
		WHERE	member_Id 			=	#{member_Id}

	</select>

	<!-- 로그인 체크 -->
	<select id="loginCheck" resultType="String">

		SELECT	member_Seq, 
				member_Id,
				member_Way
		FROM 	member_tb
		WHERE	member_Way			=	'Y'
		AND		member_Id 			=	#{member_Id}
		AND		member_Pw 			=	HEX(AES_ENCRYPT(#{member_Pw},'raison'))

	</select>

	<!-- 로그인 인증여부 ( 회원가입 인증 ) -->
	<select id="loginAuth" resultType="int">

		SELECT	IFNULL(member_authstatus, 0)
		FROM 	member_tb
		WHERE	member_Id = #{member_Id}

	</select>

	<!-- 로그인 유저 정보 -->
	<select id="viewMember" resultType="com.tosok.user.VO.MemberVO">

		SELECT	member_Seq, 
				member_Id,
				member_Way,
				member_Profile,
				member_Name,
				member_Phone
		FROM 	member_tb
		WHERE	member_Id = #{member_Id}
		AND		member_Pw = HEX(AES_ENCRYPT(#{member_Pw},'raison'))

	</select>
	
	<!-- 회원 이메일 존재 여부 -->
	<select id="idCheck" parameterType="String" resultType="Integer">

		SELECT	COUNT(*) 
		FROM	member_tb
		WHERE	member_Id 			= #{member_chk}

	</select>
	
	<!-- 회원 비밀번호 유효성 검사 -->
	<select id="pwdCheck" parameterType="String" resultType="Integer">

		SELECT	COUNT(*) 
		FROM	member_tb
		WHERE	member_Pw = HEX(AES_ENCRYPT(#{member_Pw},'raison'))
		AND		member_Id = #{member_Id}

	</select>
		
	<!-- 이메일 존재 여부 -->
	<select id="find_Id" resultType="String">

		SELECT	member_Id
		FROM	member_tb
		WHERE	member_Id = #{member_chk}

	</select>

	<!-- 회원정보 출력 (회원정보 수정 페이지) -->
	<select id="info_update" resultType="com.tosok.user.VO.MemberVO">

		SELECT	member_Seq,
				member_Id,
				AES_DECRYPT(UNHEX(member_Pw),'raison') as member_Pw,
				member_Way,
				member_Profile,
				member_Name,
				member_Phone,
				member_Zip,
				member_Addr1,
				member_Addr2,
				register_date
		FROM	member_tb
		WHERE	member_Seq = #{member_Seq}

	</select>
		
	<!-- 회원 비밀번호 수정 -->
	<update id="pwdUpdate" parameterType="java.util.HashMap">

		UPDATE	member_tb
		SET		member_Pw = HEX(AES_ENCRYPT(#{member_Pw},'raison'))
		WHERE	member_Id = #{member_Id}

	</update>

	<!-- 회원 프로필 업로드 -->
	<update id="getProfileUpload" parameterType="java.util.HashMap">

		UPDATE	member_tb
		SET		member_Profile	= #{member_Profile}
		WHERE	member_Id 		= #{member_Id}

	</update>

	<!-- 회원정보 출력 -->
	<select id="memberInfo" resultType="com.tosok.user.VO.MemberVO">

		SELECT	*
		FROM	member_tb
		WHERE	member_Id = #{member_Id}

	</select>

	<!-- 회원 활동 ( 구매 Count, 구매 총 금액 ) -->
	<select id="memberInfoCnt" resultType="com.tosok.user.VO.MemberVO">

		SELECT 		COUNT(IFNULL(PAY_SEQ, 0))	AS member_Apply_Count,
					SUM(IFNULL(TAB_PAID, 0))	AS member_Payment_Count
		FROM		bbs_payment_tb
		WHERE		BUYER_PAID_STATUS			=	'paid'
		AND			BUYER_EMAIL					= 	#{member_Id}

	</select>

	<!--  -->
   	<insert id="insertReviewUpload" useGeneratedKeys="true" parameterType="java.util.HashMap">

		INSERT INTO bbs_review_tb 	(
										ORDER_NUM, 
								        VIEW_POINT,
								        REVIEW_ID,
								        REVIEW_NAME,
								        PRODUCT_NUM,
								        PRODUCT_NAME,
								        PRODUCT_OPTION,
								        PRODUCT_QTY,
								        VIEW_CONTENT,
										VIEW_UPLOAD,
										VIEW_DATE
									)
						VALUES		(
										#{ORDER_NUM},
										#{VIEW_POINT},
										#{REVIEW_ID},
										#{REVIEW_NAME},
										#{PRODUCT_NUM},
										#{PRODUCT_NAME},
										#{PRODUCT_OPTION},
										#{PRODUCT_QTY},
										#{VIEW_CONTENT},
										#{VIEW_ARRAY},
										Now()
									);

	</insert>

	<!--  -->
	<update id="deleteProductReview" parameterType="java.util.HashMap">

		UPDATE	bbs_review_tb
		SET		VIEW_STATE		=	"N",
				PRODUCT_NUM		=	"",
				PRODUCT_NAME	=	"",
				PRODUCT_OPTION	=	"",
				PRODUCT_QTY		=	""
		WHERE	ORDER_NUM		=	#{ORDER_NUM}
		AND		REVIEW_ID		=	#{REVIEW_ID}
		AND		PRODUCT_NUM		=	#{PRODUCT_NUM}
		AND		PRODUCT_NAME	=	#{PRODUCT_NAME}
		AND		PRODUCT_OPTION	=	#{PRODUCT_OPTION}

	</update>

	<!--  -->
	<update id="updateReviewUpload" parameterType="java.util.HashMap">

		UPDATE	bbs_review_tb
		SET		VIEW_POINT 		=	#{VIEW_POINT},
				VIEW_CONTENT	=	#{VIEW_CONTENT},
				VIEW_UPLOAD		=	#{VIEW_ARRAY}
		WHERE	ORDER_NUM		=	#{ORDER_NUM}
		AND		PRODUCT_NUM		=	#{PRODUCT_NUM}
		AND		PRODUCT_NAME	=	#{PRODUCT_NAME}
		AND		PRODUCT_OPTION	=	#{PRODUCT_OPTION}

	</update>

	<!--  -->
	<update id="deleteAfterChange" parameterType="java.util.HashMap">

		UPDATE	bbs_payment_tb
		SET		REVIEW_EXIST 	=	0
		WHERE	ORDER_NUM		=	#{ORDER_NUM}
		AND		PRODUCT_NUM		=	#{PRODUCT_NUM}
		AND		PRODUCT_NAME	=	#{PRODUCT_NAME}
		AND		PRODUCT_OPTION	=	#{PRODUCT_OPTION}

	</update>

	<!--  -->
	<update id="insertAfterChange" parameterType="java.util.HashMap">

		UPDATE	bbs_payment_tb
		SET		REVIEW_EXIST 	=	1
		WHERE	ORDER_NUM		=	#{ORDER_NUM}
		AND		PRODUCT_NUM		=	#{PRODUCT_NUM}
		AND		PRODUCT_NAME	=	#{PRODUCT_NAME}
		AND		PRODUCT_OPTION	=	#{PRODUCT_OPTION}

	</update>

	<!-- 회원가입 -->
   	<insert id="signup" parameterType="java.util.HashMap">

		INSERT INTO member_tb 	(
									member_Id, 
							        member_Pw,
							        member_Name,
									member_Phone,
									member_Zip,
									member_Addr1,
									member_Addr2,
									member_authkey,
									member_authstatus,
									register_date
								)
					VALUES		(
									#{member_Id},
									HEX(AES_ENCRYPT(#{member_Pw},'raison')),
									#{member_Name},
									#{member_Phone},
									#{member_Zip},
									#{member_Addr1},
									#{member_Addr2},
									#{member_authkey},
									0,
									Now()
								);

	</insert>

	<!-- 네이버 / 카카오 회원가입 -->
   	<insert id="otherSignup" parameterType="java.util.HashMap">

		INSERT INTO member_tb 	(
									member_Id, 
									member_Way,
									member_Profile,
							        member_Name,
									member_Phone,
									member_Zip,
									member_Addr1,
									member_Addr2,
									member_authstatus,
									register_date
								)
					VALUES		(
									#{member_Id},
									#{member_Way},
									#{member_Profile},
									#{member_Name},
									#{member_Phone},
									#{member_Zip},
									#{member_Addr1},
									#{member_Addr2},
									1,
									Now()
								);

		<selectKey resultType="int" keyProperty="member_Seq" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

	<!-- 네이버 / 카카오 회원가입 -->
   	<insert id="insertLoginData" parameterType="java.util.HashMap">

		INSERT INTO bbs_login_tb 	(
										LOGIN_ID, 
										LOGIN_IP,
										LOGIN_BROWSER,
								        LOGIN_STATUS,
										PREV_URL,
										LOGIN_DATE
									)
						VALUES		(
										#{LOGIN_ID},
										#{LOGIN_IP},
										#{LOGIN_BROWSER},
										#{LOGIN_STATUS},
										#{PREV_URL},
										Now()
									);

	</insert>

	<!-- 회원정보 수정 -->
	<update id="userUpdate" parameterType="java.util.HashMap">

		UPDATE	member_tb
		SET		member_Name 	=	#{member_Name},
				member_Zip		=	#{member_Zip},
				member_Addr1	=	#{member_Addr1},
				member_Addr2	=	#{member_Addr2},
				member_Phone 	=	#{member_Phone},
				update_Date		=	NOW()
		WHERE	member_Id		=	#{member_Id}

	</update>
			
	<!-- 회원정보 수정 -->
	<update id="userUpdateAuth" parameterType="java.util.HashMap">

		UPDATE	member_tb 
		SET 	member_authkey	=	#{member_authkey}
		WHERE	member_Id 		=	#{member_Id}

	</update>
				
	<!-- 회원정보 수정 -->
	<update id="updateAuthstatus" parameterType="java.util.HashMap">

		UPDATE	member_tb 
		SET 	member_authstatus	=	#{member_authstatus}
		WHERE	member_Id			=	#{member_Id}

	</update>
			
	<!-- 회원 비밀번호 수정 -->
	<update id="update_pw" parameterType="java.util.HashMap">

		UPDATE	member_tb
		SET		member_Pw = HEX(AES_ENCRYPT(#{member_Pw},'raison'))
		WHERE	member_Id = #{member_Id}

	</update>

	<!-- 리뷰 이미지 JSON 데이터 UPDATE -->
	<update id="deleteReviewImg" parameterType="java.util.HashMap">

		UPDATE	bbs_review_tb
		SET		VIEW_UPLOAD		=	#{VIEW_UPLOAD}
		WHERE	ORDER_NUM 		=	#{ORDER_NUM}
		AND		REVIEW_ID		=	#{REVIEW_ID}
		AND		PRODUCT_NUM		=	#{PRODUCT_NUM}
		AND		PRODUCT_NAME	=	#{PRODUCT_NAME}
		AND		PRODUCT_OPTION	=	#{PRODUCT_OPTION}
		AND		PRODUCT_QTY		=	#{PRODUCT_QTY}

	</update>

</mapper>